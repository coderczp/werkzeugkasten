Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages

#あなたの役割は、必死で、SQLとJavaScriptを書く事です。


= はじめに。必ず読んで下さい。=

これは、10～20人のチームが、実装期間1～3ヶ月程度の期間にJavaでWebシステムを作る為のフレームワークです。
チームメンバの中に、1割から2割は、ほとんど未経験のプログラマが居ても問題無いかもしれません。
そんな彼等には、プロジェクトの進行に合わせて成長してもらわないと辛い事になるでしょう。
チームメンバの中に、2割から3割は、業務知識だけを持ち、設計しかしない人が居ても、何とかなる事を目標にしています。

目安として50人を超える大きなチームで、複雑なシステムを半年から数年かけて作る事にはフォーカスしていません。
又、10人を下回る小さなチームで、瞬発力を発揮する事で極短期間にシステムを完成させる事にも余りフォーカスしていません。

単に目安ですが、チーム人数と期間の表です。
|チーム|1ヶ月以内|1ヶ月～3ヶ月|3ヶ月～6ヶ月|6ヶ月以上|
|1～9|×|△|△|×|
|10～20|△|○|○|△|
|21～50|△|△|△|×|
|51～|×|×|×|×|

更に、チーム人数とシステム要件を表にしました。
|チーム|モバイル|小規模Web|大規模Web|基幹|
|1～9|×|△|△|×|
|10～20|×|○|△|×|
|21～50|×|△|△|×|
|51～|×|×|×|×|


適切なERモデルとSQLが完成した時点で、五割以上実装が完了していると見做す事が出来るような
Webシステムを開発する事を重視しています。
従って、残りの五割は、ユーザインターフェースの構築とホワイトボックステストとなります。


このフレームワークを使う為には、少なくともチーム内に１人、
このフレームワークの挙動を正しく理解している人が必要です。
プロジェクトで採用する事前に、一通りのマニュアルに目を通した上で、できる事なら全てのコードに目を通し、
更に、プロジェクトに参加するメンバに対して、教育を行う必要があります。


***********************************

-プログラマリーダ、アーキテクト、そんな人達へ

--何故Javaなのか？
---eclipseによる高い生産性
---高度なランタイムの安定性とポータビリティ

--何故SQLなのか？
---RDB以外のデータストアが選択肢として存在し得ない

--何故JavaScriptなのか？
---RIAにおける消去法


--携帯電話やその他貧弱な端末は？
このフレームワークでは、基本的に考慮していません。
貧弱な端末を想定したシステム開発には、特別なノウハウが必要ですし、
それを想定する事によって考慮するべき事柄がフレームワークを複雑化させる為です。


--実行環境について


--開発環境について


--フレームワークの基本的なポリシー
---Interface Driven
---Command Chain Processising
---Glue Code Auto Generation
---We kept simple , Try hack me

--フレームワークの基本的な構造
---メタフレームワークレイヤ
     ProcessCommandChain
     FactoryBuilder
     Factory
---フレームワークレイヤ
     ViewTemplate
     WebContoroller
        InputParameters
        FileUploader
     ApplicationController
       DataTransferObject
     DataAccessObject
     MailSendingObject
---アプリケーションレイヤ

--フレームワークの基本的なライフサイクルモデル


--フレームワークの基本的な動作モデル

---入力チェック
---画面遷移
---セッション

HTTPセッションを使う中で、考えていた事

そもそも、HTTPの上でステートフルなアプリケーションを作ろうとする事自体に、
一定の矛盾がある事を忘れてはいけない。
HTTP以外の方法使ってもイイんなら、そっちの方が良いケースの方が多いよ。


ほんとにステートフルアプリケーションなの？
ステートレスなアプリケーションじゃないの？
んで、ステートは、サーバで持つの？クライアントで持つの？


HTTPを使わざるをえず、ステートフルアプリケーションであり、
ステートはサーバで抱えるなら、HTTPセッションだよね、って話。


で、正しい答えは分らないのだけど、大体いつもこんな感じの事を考えてる。

-シリアライズ化コスト
-レプリケーション
--セッションレプリケーション
--プロセスレプリケーション
-ロードバランシング(クラスタリング)
-無効化のタイミング
--セッションタイムアウト
-負荷の傾向
--最大/最低同時アクセス数/日
--最大/最低ユニークユーザ数/日
--負荷の極端なばらつき
-プロセスの再起動


あんま難しい事考えなくても、メモリイッパイ積めば、いいじゃんって話も忘れない様に。
64bit対応OSなら、ﾃﾗﾊﾞｲﾄ単位で積めるよ？ﾏｼﾞﾃﾞﾒﾓﾘﾃﾗﾂﾒﾙｽ。
普通のブレードサーバでも、32ｷﾞｶﾞﾊﾞｲﾄとか積めるよ？
でも、メモリ積み過ぎると、fullGC怖いよ？忘れないデ。

-どんだけCPU食うのか
-どんだけの時間かかるのか？
-どういう頻度で発生するのか？

----HTTPセッション
    クラスター化可能性をWebコンテナに任せ、単一プロセス内におけるスループットの最大化を目指します。
----RDBセッション
    単一のプロセス内におけるスループットを犠牲にして、容易にクラスター化できる様にします。

---データストア


--コードの読み方


--カスタマイズのやり方

--パフォーマンスチューニングのやり方
--セキュリティ向上の為に


***********************************

-プログラマの皆様へ

--作成するべきリソースの単位とその種類

---HTML,JavaScript
---SQL
---Java

--ページング処理の書き方
--バッチ処理の書き方
--非同期処理の書き方

--開発ツールの使い方


--テストのやり方
---JUnitを使ったホワイトボックステストのやり方
---ブラウザを使ったブラックボックステストのやり方
---より高度なテストの自動化について

--デバッグのやり方

---アプリケーションのデバッグ
---フレームワークのデバッグ




***********************************
-リソース管理のやり方について

--ハンドメイドコード
--オートメイドコード